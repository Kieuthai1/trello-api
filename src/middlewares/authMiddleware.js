import { StatusCodes } from 'http-status-codes'
import { JwtProvider } from '~/providers/JwtProvider'
import { env } from '~/config/environment'
import ApiError from '~/utils/ApiError'


const isAuthorized = async (req, res, next) => {
  // L·∫•u accessToken n·∫±m trong request cookies ph√≠a client - withCredentials trong file authorizeAxios
  const clientAccessToken = req.cookies?.accessToken

  // N·∫øu nh∆∞ c√°i clientAccessToken kh√¥ng t·ªìn t·∫°i th√¨ tr·∫£ v·ªÅ l·ªói lu√¥n
  if (!clientAccessToken) {
    next(new ApiError(StatusCodes.UNAUTHORIZED, 'Unauthorized! (token not found)'))
    return
  }

  try {
    // B∆∞·ªõc 1: Th·ª±c hi·ªán gi·∫£i m√£ token xem n√≥ c√≥ h·ª£p l·ªá hay l√† kh√¥ng
    const accessTokenDecoded = await JwtProvider.verifyToken(clientAccessToken, env.ACCESS_TOKEN_SECRET_SIGNATURE)
    // console.log('üöÄ ~ isAuthorized ~ accessTokenDecoded:', accessTokenDecoded)


    // B∆∞·ªõc 2: Quan tr·ªçng: N·∫øu nh∆∞ c√°i token h·ª£p l·ªá, th√¨ s·∫Ω c·∫ßn ph·∫£i l∆∞u th√¥ng tin gi·∫£i m√£ ƒë∆∞·ª£c v√†o c√°i req.jwtDecoded, ƒë·ªÉ s·ª≠ d·ª•ng cho c√°c t·∫±ng c·∫ßn x·ª≠ l√Ω ·ªü ph√≠a sau
    req.jwtDecoded = accessTokenDecoded

    // B∆∞·ªõc 3: Cho ph√©p c√°i request ƒëi ti·∫øp
    next()
  } catch (error) {
    // console.log('üöÄ ~ isAuthorized ~ error:', error)
    // N·∫øu c√°i accessToken n√≥ b·ªã h·∫øt h·∫°n (expired) th√¨ m√¨nh c·∫ßn tr·∫£ v·ªÅ m·ªôt c√°i m√£ l·ªói GONE- 410  cho ph√≠a FE bi·∫øt ƒë·ªÉ g·ªçi api refreshToken
    if (error?.message?.includes('jwt expired')) {
      next(new ApiError(StatusCodes.GONE, 'Need to refresh token'))
      return
    }
    // N·∫øu nh∆∞ c√°i accessToken n√≥ kh√¥ng h·ª£p l·ªá do b·∫•t k·ª≥ ƒëi·ªÅu g√¨ kh√°c v·ª• h·∫øt h·∫°n th√¨ ch√∫ng ta c·ª© th·∫≥ng tr·∫£ v·ªÅ m√£ 401 cho ph√≠a FE g·ªçi api sign_out lu√¥n
    next(new ApiError(StatusCodes.UNAUTHORIZED, 'Unauthorized!'))


  }
}

export const authMiddleware = { isAuthorized }